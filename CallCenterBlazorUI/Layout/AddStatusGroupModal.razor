@using System.Collections.Generic
@using CallCenterBlazorUI.Objects
@inject HttpClient HttpClient

<Modal IsVisible="@IsOpen" IsVisibleChanged="@(val => IsOpen = val)">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Добавить новую группу статусов</h5>
            <button type="button" class="close" @onclick="() => IsOpen = false">
                <span>&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label>Название группы:</label>
                <input @bind="@NewGroupName" class="form-control" />
            </div>
            
            <label>Статусы:</label>
            @foreach (var (status, index) in StatusNames.Select((s, i) => (s, i)))
            {
                <div class="input-group mb-2">
                    <input @bind="@StatusNames[index]" class="form-control" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-danger" @onclick="@(() => RemoveStatusField(index))">
                            &times;
                        </button>
                    </div>
                </div>
            }
            
            <button @onclick="AddStatusField" class="btn btn-outline-primary btn-sm">
                + Добавить статус
            </button>
        </div>
        <div class="modal-footer">
            <button @onclick="SaveGroup" class="btn btn-primary">Сохранить</button>
            <button @onclick="() => IsOpen = false" class="btn btn-secondary">Отмена</button>
        </div>
    </div>
</Modal>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public ProjectDetailsClass Project { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    private bool _isProcessingClick = false;
    //[Inject] public HttpClient HttpClient { get; set; }

    private string NewGroupName { get; set; } = string.Empty;
    private List<string> StatusNames { get; set; } = new() { string.Empty };

    private void AddStatusField()
    {
        StatusNames.Add(string.Empty);
    }

    private void RemoveStatusField(int index)
    {
        if (StatusNames.Count > 1)
        {
            StatusNames.RemoveAt(index);
        }
    }

    private async Task SaveGroup()
    {
        if (string.IsNullOrWhiteSpace(NewGroupName))
        {
            return;
        }

        var nonEmptyStatusNames = StatusNames.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
        await Project.AddStatusGroupAsync(HttpClient, NewGroupName, nonEmptyStatusNames);
        await OnSaved.InvokeAsync();
        IsOpen = false;
        
        // Сброс формы
        NewGroupName = string.Empty;
        StatusNames = new() { string.Empty };
    }
}